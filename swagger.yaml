definition:
  openapi: 3.0.0
  info:
    title: "Demo Swagger"
    version: "1.0.0"
    description: "Demo swagger with NodeJS"
  servers:
    - url: http://localhost:4000
  tags:
    - name: Post
      description: "Post API Documentation"
    - name: User
      description: "User API Documentation"

  components:
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
    schemas:
      Post:
        type: object
        required:
          - title
          - content
          - author_id
        properties:
          title:
            type: string
            description: Title of post
            example: This is title string
          subContent:
            type: string
            description: Sub content of post
            example: This is sub-content string
          content:
            type: string
            description: Full content of post
            example: This is full content string

      User:
        type: object
        properties:
          username:
            type: string
            example: huutin123
          password:
            type: string
            example: mypassword
          name:
            type: string
            example: Huu Tin
  paths:
    /posts:
      get:
        tags:
          - "Post"
        summary: Returns list of posts.
        description: ""
        responses:
          "200":
            description: A JSON array of posts
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
      post:
        security:
          - bearerAuth: []
        tags:
          - "Post"
        summary: Create new post
        consumes:
          - "application/json"
        requestBody:
          description: "Create New Post"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        responses:
          "201":
            description: "Created new post successfully"
    /posts/{id}:
      get:
        tags:
          - "Post"
        summary: Find a post by Id.
        description: ""
        consumes:
          - "application/json"
        produces:
          - "application/json"
        parameters:
          - name: "id"
            in: path
            description: "Post id to find"
            required: true
            type: string
        responses:
          "404":
            description: "Id not found"
          "200":
            description: "Get a Post"
      put:
        security:
          - bearerAuth: []
        tags:
          - "Post"
        summary: Update a post by Id.
        description: ""
        consumes:
          - "application/json"
        produces:
          - "application/json"
        parameters:
          - name: "id"
            in: path
            description: "Post id to update"
            required: true
            type: string
        requestBody:
          description: "Update an existed post"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        responses:
          "404":
            description: "Id not found"
          "200":
            description: "Updated Post"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Post"
      delete:
        security:
          - bearerAuth: []
        tags:
          - "Post"
        summary: Delete a post by Id.
        description: ""
        consumes:
          - "application/json"
        produces:
          - "application/json"
        parameters:
          - name: "id"
            in: path
            description: "Post id to delete"
            required: true
            type: string
        responses:
          "404":
            description: "Id not found"
          "200":
            description: "Deleted Post"
    /users:
      get:
        tags:
          - "User"
        summary: Returns list of Users.
        description: ""
        responses:
          "200":
            description: A JSON array of Users
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
    /users/{id}:
      get:
        tags:
          - "User"
        summary: Find a user by Id.
        description: ""
        consumes:
          - "application/json"
        produces:
          - "application/json"
        parameters:
          - name: "id"
            in: path
            description: "User id to find"
            required: true
            type: string
        responses:
          "404":
            description: "Id not found"
          "200":
            description: "Return a object of user"
      put:
        security:
          - bearerAuth: []
        tags:
          - "User"
        summary: Update a user by Id.
        description: ""
        consumes:
          - "application/json"
        produces:
          - "application/json"
        parameters:
          - name: "id"
            in: path
            description: "User id to update"
            required: true
            type: string
        requestBody:
          description: "Update an existed User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        responses:
          "404":
            description: "Id not found"
          "200":
            description: "Updated User"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Post"
    /users/register:
      post:
        tags:
          - "User"
        summary: Sign up a new User
        consumes:
          - "application/json"
        requestBody:
          description: "Create new User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        responses:
          "201":
            description: "Created new post successfully"
    /users/login:
      post:
        tags:
          - "User"
        summary: Sign in to get token
        consumes:
          - "application/json"
        requestBody:
          description: "Login to get jwt token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: huutin123
                  password:
                    type: string
                    example: mypassword
        responses:
          "200":
            description: "Login successfully and return a jwt token"
          "404":
            description: "Username doesn't exist"
          "400":
            description: "Wrong password"
apis: ["src/routes/*.ts"]
